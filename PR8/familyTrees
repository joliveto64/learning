// FAMILY DICKMEASURING //////////////////////////////////////////
////////////////////////////////////////////////////////

// 1. listen
// 2. clarify. I am given two people in a tree, so I am taking that to mean I am given two nodes of a tree. Then I am to determine the total wealth (node.value) of each of the given nodes as well as all of the nodes which directly link them.

// example: y
//         /\
//        x  x   < include this one in total
//       /\  /\
//      x x y  x   < not this one
// totaling this example I would total the value of y and the top, the next right node, then the last y together (3 nodes total)

// 3. function signature
// function familyTrees(node1, node2){
// operations
// return number (total)
// }

// non-coding steps:
// 1. start at lowest target node in tree
// 2. the net-worth of that node is the total
// 3. move up 1 node
// 4. is this the other target node?
// -----if yes, add net worth to total and this is your answer
// -----if no, add net worth and go to step 3.

// 4. brute force
function familyTrees(ancestor, descendant, total = 0) {
  if (!descendant) return undefined;
  // 1. start at descendant node in tree
  // 2. add net worth to total
  if (descendant) total += descendant.val;
  // 4. is this also the ancestor node?
  // -----if yes, add net worth to total and this is your answer
  if (descendant === ancestor) {
    return total;
    // -----if no, add net worth and go to step 3.  total += descendant.val
  }
  // 3. move up 1 node and repeat from step 2
  return familyTrees(ancestor, descendant.parent, total);
}
// alright this was way easier this way and the steps in my head also made sense in code. going bottom to top was ðŸ‘ŒðŸ‘ŒðŸ‘Œ

class BinaryTreeNode {
  constructor(val, parent = null, left = null, right = null) {
    this.val = val;
    this.parent = parent;
    this.left = left;
    this.right = right;
  }
}

let node2 = new BinaryTreeNode(2);
let node3 = new BinaryTreeNode(3);
let node4 = new BinaryTreeNode(4);
let node5 = new BinaryTreeNode(5);
let node6 = new BinaryTreeNode(6);
let node7 = new BinaryTreeNode(7);
let node8 = new BinaryTreeNode(8);

node5.left = node3;
node5.right = node7;

node3.left = node2;
node3.right = node4;

node7.left = node6;
node7.right = node8;

node3.parent = node5;
node7.parent = node5;

node2.parent = node3;
node4.parent = node3;

node6.parent = node7;
node8.parent = node7;

// console.log(familyTrees(node5, node2));
